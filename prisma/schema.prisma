// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  categoryId  String // Foreign Key to Category
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  SuitableFor SuitableFor @default(all)
  sizeId      String // Foreign Key to Size
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String // Foreign Key to Color
  color       Color       @relation(fields: [colorId], references: [id])
  images      Image[] // Relation to Image model
  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String // Foreign Key to Order
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String // Foreign Key to Product
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  totalPrice Float   @default(0)

  @@index([orderId])
  @@index([productId])
}

model Order {
  id           String      @id @default(uuid())
  orderItems   OrderItem[] // Relation to OrderItem model
  isPaid       Boolean     @default(false)
  phone        String      @default("")
  address      String      @default("")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customerName String      @default("")
  User         User        @relation(fields: [userId], references: [id])
  totalAmount  Float
  userId       String
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum SuitableFor {
  men
  women
  kids
  baby
  all
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user")
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
